@page "/"
@using System.Timers

@implements IDisposable
<PageTitle>Home</PageTitle>

<div class="container mt-5">
    <div class="card">
        <div class="card-header">
            <h3>Current Map</h3>
        </div>
        <div class="card-body">
            <h4 class="card-title">@CurrentMap</h4>
            <p class="card-text">Time Remaining on Current Map: @TimeRemainingOnCurrentMap</p>
            <ul>
                @foreach (var map in Maps)
                {
                    <li>Time Until @map: @GetTimeUntilMap(map)</li>
                }
            </ul>
        </div>
    </div>
</div>

@code {
    private string[] Maps = { "Frost", "Goblin", "Crypt" };
    private int CurrentMapIndex = 0;
    private string CurrentMap => Maps[CurrentMapIndex];
    private string TimeRemainingOnCurrentMap => GetTimeRemainingOnCurrentMap();
    private Timer timer;
    private DateTime referenceTime = new DateTime(2024, 6, 1, 16, 48, 0, DateTimeKind.Utc);

    protected override void OnInitialized()
    {
        timer = new Timer(1000); // 1 second interval
        timer.Elapsed += OnTimerElapsed;
        timer.Start();
        UpdateCurrentMap();
    }

    private void OnTimerElapsed(object sender, ElapsedEventArgs e)
    {
        UpdateCurrentMap();
    }

    private void UpdateCurrentMap()
    {
        var utcNow = DateTime.UtcNow;
        var elapsedMinutes = (utcNow - referenceTime).TotalMinutes;
        CurrentMapIndex = ((int)elapsedMinutes / 3) % Maps.Length;
        InvokeAsync(StateHasChanged);
    }

    private string GetTimeRemainingOnCurrentMap()
    {
        var utcNow = DateTime.UtcNow;
        var elapsedSeconds = (utcNow - referenceTime).TotalSeconds;
        var currentMapElapsedSeconds = elapsedSeconds % (3 * 60);
        var remainingSeconds = (3 * 60) - currentMapElapsedSeconds;
        return TimeSpan.FromSeconds(remainingSeconds).ToString(@"mm\:ss");
    }

    private string GetTimeUntilMap(string map)
    {
        if (CurrentMap == map)
        {
            return "Curent map";
        }

        var utcNow = DateTime.UtcNow;
        var elapsedSeconds = (utcNow - referenceTime).TotalSeconds;
        var totalSeconds = ((int)elapsedSeconds / (3 * 60)) * (3 * 60);
        while (Maps[(totalSeconds / (3 * 60)) % Maps.Length] != map)
        {
            totalSeconds += (3 * 60);
        }
        var timeUntilMapSeconds = totalSeconds - (int)elapsedSeconds;
        return TimeSpan.FromSeconds(timeUntilMapSeconds).ToString(@"hh\:mm\:ss");
    }

    private string GetCryptAvailabilityMessage()
    {
        return CurrentMap == "Crypt" ? "Crypt is currently available!" : $"Time Until Crypt: {GetTimeUntilMap("Crypt")}";
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}
